## This is a template for a network interface configuration file used with ifup.
## See 'man 8 ifup' for details.
## Additionally to the following variables you can set every variable from the
## interface independent configurations files (config, dhcp, wireless) also in
## the interface configuration file to overwrite the global settings.

## Type: list(auto,hotplug,ifplugd,nfsroot,manual,off,onboot)
## Default: manual
#
# STARTMODE tells ifup when a interface should be set up. Possible values are:
# - auto:    start it as soon as the interface is available. Either when booting
#            or when a device is plugged or initialized at runtime
# - hotplug: alias for auto, only difference is that configurations with that
#            startmode are not considered to be mandatory if list of mandatory
#            devices is derived automatically.
# - ifplugd: interface will be controlled by ifplugd daemon. (If you like to use
#            multiple interfaces mutually exclusive you have to set also
#            IFPLUGD_PRIORITY.)
# - nfsroot: Nearly like 'auto'. But interfaces with this startmode will never
#            be shut down via 'rcnetwork stop'. 'ifdown <iface>' still works.
#            Use this when you have a nfs root filesystem or you connect to an
#            iSCSI / FCoE target.
# - manual:  start it only when ifup is called manually
# - off:     will not be started at all
# - onboot:  alias for auto, deprecated, only for backward compliance
STARTMODE=

## Type:    integer(0:100)
## Default: 0
#
# All interfaces with STARTMODE=ifplugd and with IFPLUGD_PRIORITY != 0 will be
# used mutually exclusive. If more then one of these interfaces is 'plugged'
# then we need a way to decide which interface to take up. Therefore we have to
# set the priority of each interface.
# Note: Connection detection of wireless devices is not very reliable.
# Therefore we currently simple consider a wlan interface as always connected.
# With a lower priority as all other interfaces it will then be set up if no
# other connection is established.
# A value of 0 means no priority set.
#
IFPLUGD_PRIORITY=

## Type:    list(static,dhcp,dhcp4,dhcp6,autoip,dhcp+autoip,6to4,none)
## Default: static
#
# With BOOTPROTO you can choose in which mode the interface will be set up:
# - static:      Set up static address(es)
# - dhcp:        Start a dhcp client (IPV4 and IPv6) on that interface.
# - dhcp4:       Start a dhcp client (IPv4 only) on that interface.
# - dhcp6:       Start a dhcp client (IPv6 only) on that interface.
# - autoip:      Automatic search for a free address and assign it statically.
# - dhcp+autoip: Try dhcp4 and use autoip if dhcp fails.
# - 6to4:        Set up ipv6 over ipv4 tunnel (see man ifcfg-tunnel)
# - none:        Do not set up the link or ip, a (bonding) master will do it.
# If you use dhcp or autoip you may additionally specify static address(es).
#
BOOTPROTO=

## Type:    string
## Default: ""
#
# If using a static configuration you have to set an IP address and a netmask
# or prefix length. The following examples are equivalent:
#
# 1) IPADDR=192.168.1.1/24     # NETMASK and PREFIXLEN will be ignored
# 2) IPADDR=192.168.1.1
#    PREFIXLEN=24              # NETMASK will be ignored
# 3) IPADDR=192.168.1.1
#    NETMASK=255.255.255.0
#
# For multiple addresses use this variable multiple times and extend them with
# different suffixes. For example IPADDR_1=, IPADDR_2=. See section 'Multiple
# addresses' in manpage ifcfg).
#
IPADDR=


## Type:    string
## Default: ""
#
# Set the network mask for the ip address. This variable will be ignored if a
# prefixlength is set in variable PREFIXLEN in IPADDR.
# For multiple addresses use the same suffixes as with IPADDR.
#
# Note: Deprecated IPv4 only variable.
#
NETMASK=

## Type:    integer(0,64)
## Default: ""
#
# Set the prefixlength of the ip address. This variable will be ignored if a
# prefixlength is set in variable IPADDR.
# For multiple addresses use the same suffixes as with IPADDR.
#
PREFIXLEN=

## Type:    string
## Default: ""
#
# Set the broadcast address of the interface. If you leave it empty a default
# will be used. See DEFAULT_BROADCAST in /etc/sysconfig/network/config.
# For multiple addresses use the same suffixes as with IPADDR.
#
# Note: Deprecated IPv4 only variable.
#
BROADCAST=

## Type:    string
## Default: ""
#
# If you'd like to set up a point to point connection you may specify the
# remote IP here.
# For multiple addresses use the same suffixes as with IPADDR.
#
REMOTE_IPADDR=

## Type:    string
## Default: ""
#
# Set a label for the interface. This may be neccessary if you still use
# ifconfig and configured multiple addresses. (See manpage ifcfg).
# For multiple addresses use the same suffixes as with IPADDR.
#
LABEL=

## Type:    integer
## Default: ""
#
# Set a specific Maximum Transmission Unit (MTU) for this interface.
#
MTU=

## Type:    string
## Default: ""
#
# Set a specific link level address (LLADDR), a.k.a. MAC address or hardware
# address, for this interface (if the driver supports it).
#
LLADDR=

## Type:    string
## Default: ""
#
# If this variable is not empty ifup will call ethtool with this options. 
# See the ethtool (8) manual page for available options.
# If the option string starts with a '-' (e.g. '-K iface rx on'), then the 
# second word in the string will be replaced with the current interface name.
# Otherwise (e.g. 'autoneg off speed 10') ifup prepends '-s <interface>'.
#
ETHTOOL_OPTIONS=

## Type:    yesno
## Default: yes
#
# This options defines whether the script /etc/ppp/poll.tcpip is run after
# connecting to the internet via a dialup connection or not. The script
# itself calls various jobs like fetchmail, fetchnews and sendmail.
#
RUN_POLL_TCPIP=

## Type:    yesno
## Default: no
#
# If an interface may be controlled by a user via qinternet, cinternet
# or another user interface, you have to set this variable to yes.
#
USERCONTROL=

## Type:    string
## Default: ""
#
# This string is used as description of the device in YaST.
# This variable is not used in ifup and friends.
#
NAME=

## Type:    string
## Default: ""
#
# Internal variable for YaST. Don't change it.
# This variable is not used in ifup and friends.
#
UNIQUE=

##########################################################################
## DHCP settings
#
# See /etc/sysconfig/network/dhcp file for details.
#
DHCLIENT_SET_HOSTNAME=
DHCLIENT_HOSTNAME_OPTION=
DHCLIENT_SET_DEFAULT_ROUTE=
DHCLIENT_ROUTE_PRIORITY

DHCLIENT6_MODE=
DHCLIENT6_RAPID_COMMIT=
DHCLIENT6_SET_HOSTNAME=
DHCLIENT6_HOSTNAME_OPTION=

##########################################################################
## bridge settings. See ifcfg-bridge(5) and brctl(8) for mor information
## 

## Type:    yesno
## Default: yes
#
# This option must be set to 'yes' to identify this interface as a bridge
# interface.
#
BRIDGE=

## Type:    string
## Default: 
#
# This variable contains a space-separated list of N interfaces which take part 
# in the bridging.
#
BRIDGE_PORTS=

## Type:    integer(0:)
## Default: 
#
# This option sets the ethernet address ageing time, in seconds. After <time> 
# seconds of not having seen a frame coming from a certain address, the bridge 
# will delete that address from the forwarding database. Setting ageing time 
# to zero makes all entries permanent.
#
BRIDGE_AGEINGTIME=

## Type:    integer(0:)
## Default:
#
# Forwarding delay time is the time in seconds spent in each of the listening
# and learning states before the forwarding state is entered. This delay is  
# so that when a new bridge comes onto a busy network it looks at some traffic 
# before participating.
#
BRIDGE_FORWARDDELAY=

## Type:    integer(0:)
## Default:
#
# Periodically, a hello packet is sent out by the root bridge and the designated 
# bridges. Hello packets are used to communicate information about the topology 
# throughout the entire bridged local area network.
#
BRIDGE_HELLOTIME=

## Type:    integer(0:)
## Default:
#
# If a another bridge in the spanning tree does not send out a hello packet for
# a long period of time, it is assumed to be dead. This timeout can be set with 
# this variable.
#
BRIDGE_MAXAGE=

## Type:    string
## Default:
#
# This is a space-separated list of costs corresponding to the interfaces in 
# BRIDGE_PORTS. Each interface in BRIDGE_PORTS could have a different speed 
# and this value is used when deciding which link to use. Faster interfaces
# should have lower costs. 
#
BRIDGE_PATHCOSTS=

## Type:    string
## Default:
#
# This is a space-separated list of priorities corresponding to the interfaces 
# in BRIDGE_PORTS. The priority value is an unsigned 8-bit quantity (a number 
# between 0 and 255), and has no dimension. This metric is used in the
# designated port and root port selection algorithms.
#
BRIDGE_PORTPRIORITIES=

## Type:    integer(0:65535)
## Default: 
#
# This option sets the bridge's priority. The priority value is an unsigned 
# 16-bit quantity (a number between 0 and 65535), and has no dimension. Lower 
# priority values are 'better'. The bridge with the lowest priority will be
# elected 'root bridge'.
#
BRIDGE_PRIORITY=

## Type:    list(on,off)
## Default: off
#
# Multiple ethernet bridges can work together to create even larger networks 
# of ethernets using the IEEE 802.1d spanning tree protocol. This protocol  
# is used for finding the shortest path between  two  ethernets, and for 
# eliminating loops from the topology.
# 
# The spanning tree protocol can also be turned off (for those situations
# where it just doesn't make sense, for example when this linux box is
# the only bridge on the LAN, or when you know that there are no loops in
# the topology.)
#
BRIDGE_STP=

## Type:	yesno
## Default:	""
#
# Defines whether this interface is wireless or not.  This variable is usually
# not set, WLAN capabilities get auto-detected in this case.  As the WIRELESS
# variable is device speficic and not network specific, it can have no suffix.
WIRELESS=

## Type:	string
## Default:	"managed"
#
# Set the operating mode of the device, which depends on the network topology.
# Set to ad-hoc for network composed of only one cell and without Access
# Point, managed for network composed of many cells, with roaming or with an
# Access Point, master if you want your system act as an Access Point or
# synchronisation master. If unset, managed will be used.
WIRELESS_MODE=

## Type:	string
## Default:	""
#
# Set the SSID/ESSID (or Network Name - in some products it may also called
# Domain ID). The ESSID is used to identify cells which are part of the same
# virtual network. If emtpy or set to any the node will connect to the
# Access Point with the best signal strength around (in managed operating
# mode). For WLANs that make use of WPA (see WIRELESS_AUTH_MODE below)
# you need to set your ESSID.
WIRELESS_ESSID=

## Type:	list(open,sharedkey,psk,eap)
## Default:	open
#
# Sets authentication mode. The mode depends on the protection technology
# being used, WEP or WPA. WEP (Wired Equivalent Privacy) is a system to
# encrypt wireless network traffic, with an optional authentication on the
# basis of the used encryption key. In most cases where WEP is used, open
# mode (no authentication at all) is fine. This does not mean that you can
# not use WEP encryption. Some networks may require sharedkey authentication.
# NOTE: Shared key authentication makes it easier for a potential attacker to
# break into your network. Unless you have specific needs for shared key
# authentication, use the open mode. As WEP has been proved insecure, WPA
# (Wi-Fi Protected Access) was defined to close its security wholes, but not
# every hardware supports WPA. In case you want to use WPA-PSK (WPA preshared
# key authentication, aka WPA "Home"), set this to psk. In case you want
# to use WPA-EAP (WPA with Extensible Authentication Protocol, aka WPA
# "Enterprise"), set this to eap. WPA authentication modes are only
# possible when WIRELESS_MODE is set to managed.
WIRELESS_AUTH_MODE=

## Type:	string
## Default:	""
#
# When using WPA-PSK authentication, you need to specify your preshared key
# here. The key is used for authentication and encryption purposes. You can
# enter it in hex digits (needs to be exactly 64 digits long) or as passphrase
# getting hashed (8 to 63 ASCII characters long).
WIRELESS_WPA_PSK=

## Type:	string
## Default:	""
#
# WPA-EAP can use different authentication modes. Supported
# values are TLS, PEAP, and TTLS. Default is to allow any.
# When using WIRELESS_AP_SCANMODE 2, this variable needs to be set.
WIRELESS_EAP_AUTH=

## Type:	string
## Default:	""
#
# Using this variable you can specify the WPA protocol to be used.
# Valid values are WPA and RSN (aka WPA2, can be also used as synonym).
# Default is to allow both. When using WIRELESS_AP_SCANMODE 2, this
# variable needs to be set, otherwise WPA will be used as fallback.
WIRELESS_WPA_PROTO=

## Type:	string
## Default:	""
#
# Needs to be set in conjunction with WPA-EAP. Set to your identity as
# configured on the RADIUS server.
WIRELESS_WPA_IDENTITY=

## Type:	string
## Default:	""
#
# Needs to be set in conjunction with WPA-EAP. Set to your password as
# configured on the RADIUS server.
WIRELESS_WPA_PASSWORD=

## Type:	string
## Default:	"anonymous"
#
# Sets anonymous identity. Default is "anonymous". The anonymous identity is
# used with WPA-EAP protocols that support different tunnelled identities
# (e.g., TTLS).
WIRELESS_WPA_ANONID=

## Type:	string
## Default:	""

# Used with WPA-EAP. If you want to check the RADIUS server's authenticity,
# which is highly recommended, you need specify the certificate of the
# CA (Certification Authority) which signed the server's certificate.
# Point this variable to the certificate file including full path.
WIRELESS_CA_CERT=

## Type:	string
## Default:	""
#
# Used with WPA-EAP. If you are using TLS as authentication protocol you need
# to authenticate yourself through a client certificate. Point this variable
# to the certificate file including full path.
WIRELESS_CLIENT_CERT=

## Type:	string
## Default:	""
#
# Used with WPA-EAP. Authentication mode TLS uses a public/private key method
# to encrypt negotiation data. Point this variable to the file containing your
# client private key including full path.
WIRELESS_CLIENT_KEY=

## Type:	string
## Default:	""
#
# Used with WPA-EAP. Set to the passphrase of your client private key file.
WIRELESS_CLIENT_KEY_PASSWORD=

## Type:	yesno
## Default:	yes
#
# Defines whether hidden SSID scan support should be enabled.  Setting this to
# "no" can speed up scanning and makes the usage of WIRELESS_PRIORITY
# possible. This is only used in conjunction with wpa_supplicant.
WIRELESS_HIDDEN_SSID=

## Type:	integer
## Default:	""
#
# This variable only makes sense used in conjunction with multiple
# networks. If you want to prefer one configured network for over another, set
# the respecitve WIRELESS_PRIORITY variable (means, with the same suffix) to a
# higher value (integer only). NOTE: This does not work for networks that are
# configured with WIRELESS_HIDDEN_SSID="yes" (which is default). For networks
# with hidden SSID scanning support the suffix number is important.  The
# network with the lowest suffix number gets probed first.
WIRELESS_PRIORITY=

## Type:	list(0,1,2)
## Default:	1
#
# Defines which SSID scan mode should be used. Mode 0 means the driver
# performs the scan. Mode 1 means wpa_supplicant takes care of scanning.  Mode
# 2 is basically the same as mode 0 but the access point gets chosen by
# security policy and SSID. This mode does not support multiple network
# settings. Default is "1" for most drivers. Try "0" or "2" if you have
# problems associating to your access point. This variable can have no
# suffix. This is only used in conjuntion with wpa_supplicant.
WIRELESS_AP_SCANMODE=

## Type:        string
## Default:     ""
#
# This variable allows to override the wpa driver name that should be used
# by the wpa_supplicant. In most cases "nl80211" (default on openSUSE 11.3)
# or "wext" (old default) can be used, but there are few exceptions.
#
# The new "nl80211" wpa driver supports wireless regulatory domain, that
# can be set in /etc/sysconfig/network/config, WIRELESS_REGULATORY_DOMAIN
# variable (global).
#
WIRELESS_WPA_DRIVER=

## Type:	string
## Default:	""
#
# In environments with multiple Access points you may want to define the one
# to connect to by entering its MAC address. Format is 6x2 hex digits,
# seperated by colons, eg 01:02:03:04:05:06.
# See also the iwconfig ap option description in the iwconfig(8) manual page.
#
# Note, that some drivers (mac80211 based) may require to set this variable
# to a specific access point address, 'any' or 'off' to start scanning for
# an appropriate cell, so ifup-wireless sets it to 'any' in Managed and
# Ad-Hoc modes when the variable is empty.
WIRELESS_AP=

## Type:	string
## Default:	""
# Set the nickname, or the station name. Most 802.11 products do define it,
# but this is not used as far as the protocols (MAC, IP, TCP) are concerned
# and completely accessory as far as configuration goes. If this variable is
# empty the hostname will be used as nick.
WIRELESS_NICK=

## Type:	string
## Default:	""
#
# Set the Network ID (in some products it is also called Domain ID). As all
# adjacent wireless networks share the same medium, this parameter is used to
# differenciate them (create logical colocated networks) and identify nodes
# belonging to the same cell.
WIRELESS_NWID=

## Type:	string
## Default:	""
#
# With this variable you can define the channel being used. This is only
# applicable to ad-hoc and master operating modes. Channels are usually
# numbered starting at 1, and you may use iwpriv(8) to get the total number of
# channels and list the available frequencies. Depending on regulations, some
# frequencies/channels may not be available.
WIRELESS_CHANNEL=

## Type:	integer
## Default:	""
#
# Set the sensitivity threshold. This is the lowest signal level for which we
# attempt a packet reception, signal lower than this are not received. This
# is used to avoid receiving background noise.
WIRELESS_SENS=

## Type:	string
## Default:	"auto"
#
# Usually the highest bitrate available gets used. If you have specific needs
# to set a bitrate, you can do it here (rates are in Mbit/s). Bitrates above
# 11 are only available for cards compliant to 802.11a or 802.11g standards.
WIRELESS_RATE=

## Type:	string
## Default:	""
#
# You can define up to 4 WEP encryption keys. You can use WEP with open and
# sharedkey authentication. The key can be entered in different formats:
# Either directly in hex digits, with or without dashes, or in the key's ASCII
# representation (prefix s: ), or as a passphrase which will be hashed (prefix
# h: ). The amount of hex digits resp. length of the ASCII key depends on the
# key size being used: 10 hex digits or 5 ASCII characters for 64 bit keys, 26
# hex digits or 6 to 13 ASCII characters for 128 bit keys (see
# WIRELESS_KEY_LENGTH below). Examples:
#
# WIRELESS_KEY_0="0123-4567-89"
# WIRELESS_KEY_0-"s:hello"
# WIRELESS_KEY_0="h:mysecretphrase"
#
# You  can also use 1, 2, or 3 as suffix for multiple key settings. This
# is usually not necessary. Leave empty if you do not want WEP.
WIRELESS_KEY=

## Type:	list(40,104)
## Default:	104
#
# Defines the length in bits for all keys used. There are currently 40 and 104
# bit keys supported. Sometimes they are also called 64 resp. 128 bits
# (depends on whether you count the 24 bit initialization vetor or not).
# This variable is only meaningful if you enter the key as passphrase.
WIRELESS_KEY_LENGTH=

## Type:	list(0,1,2,3)
## Default:	0

# Sets the default WEP key. The default key is used to encrypt outgoing
# packets, incoming ones are decrypted with the key number specified in the
# packet. This defaults to 0.
WIRELESS_DEFAULT_KEY=

## Type:	string
## Default:	"off"
#
# RTS/CTS adds a handshake before each packet transmission to make sure that
# the channel is clear. This adds overhead, but increase performance in case
# of hidden nodes or large number of active nodes. Possible values: any
# integer (representing the size of the smallest packet for which the node
# sends RTS), auto, fixed, or off.
WIRELESS_RTS=

## Type:	string
## Default:	"off"
#
# Fragmentation allow to split a IP packet in a burst of smaller fragments
# transmitted on the medium. In most cases this adds overhead, but in very
# noisy environment this reduce the error penalty. Possible values: any
# integer (representing the maximum fragment size), auto, fixed, or off.
WIRELESS_FRAG=

## Type:	string
## Default:	''
#

## Type:	string
## Default:	''
#
# WPA modes support two different encryption systems, TKIP and
# CCMP. This variable defines which to use for unicast communication.
# Default is to allow both. In case you want to restrict it to one
# protocol, set this variable. When using WIRELESS_AP_SCANMODE 2, this
# variable needs to be set, otherwise TKIP will be used as fallback.
WIRELESS_CIPHER_PAIRWISE=

## Type:	string
## Default:	''
#
# WPA modes support two different encryption systems, TKIP and
# CCMP. This variable defines which to use for broad-/multicast
# communication.  Default is to allow both. In case you want to
# restrict it to one protocol, set this variable. When using
# WIRELESS_AP_SCANMODE 2, this variable needs to be set, otherwise
# TKIP will be used as fallback.
WIRELESS_CIPHER_GROUP=

## Type:	string
## Default:	''
#
# When using WPA-EAP with PEAP authentication, you can use
# this variable to force which PEAP version (0 or 1) to be used.
# Default is to allow both.
WIRELESS_PEAP_VERSION=
